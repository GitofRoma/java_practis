package tests.homework5;

public class Task5 {

    /**
     Дано прямоугольное поле размером n*m клеток. Можно совершать шаги длиной в одну клетку вправо или вниз.
     Посчитать, сколькими способами можно попасть из левой верхней клетки в правую нижнюю.
     Попробуйте решить задачу методом динамического программирования.
     Подсказка: Начать рассуждение можно так: "В некоторую клетку с координатами (i,j) можно прийти только сверху или слева,
     то есть из клеток с координатами (i – 1, j) и (i, j – 1).
     Таким образом, для клетки (i, j) число маршрутов A[i][j] будет равно A[i – 1][j] + A[i][j – 1], то есть задача сводится к двум подзадачам.".
     */

    //Делаю дз с опозданиями(опаздываю от группы), но хочу доделать дабы разобраться

    public static void main(String[] args) {
            int n = 3;
            int m = 4;
            int paths = countPaths(n, m);
            System.out.println("Количество путей: " + paths);

    }

        public static int countPaths(int n, int m) {
            int[][] A = new int[n][m];

            // Инициализация первой строки
            for (int j = 0; j < m; j++) {
                A[0][j] = 1;
            }

            // Инициализация первого столбца
            for (int i = 0; i < n; i++) {
                A[i][0] = 1;
            }

            // Вычисление путей для остальных клеток
            for (int i = 1; i < n; i++) {
                for (int j = 1; j < m; j++) {
                    A[i][j] = A[i - 1][j] + A[i][j - 1];
                }
            }

            // Возвращаем количество путей к правому нижнему углу
            return A[n - 1][m - 1];
        }


}
